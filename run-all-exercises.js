const fs = require("fs");
const path = require("path");
const { runMochaTests, showTestResults } = require("./runMocha.js");

async function runAllExercises() {
  const exercisesDir = path.join(__dirname, "exercises");
  const exercises = fs
    .readdirSync(exercisesDir)
    .filter((item) => {
      const fullPath = path.join(exercisesDir, item);
      return fs.statSync(fullPath).isDirectory();
    })
    .sort();

  console.log(`üöÄ –ù–∞–π–¥–µ–Ω–æ ${exercises.length} —É—Ä–æ–∫–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞\n`);

  let totalPassed = 0;
  let totalFailed = 0;
  const failedExercises = [];

  for (const exercise of exercises) {
    const exercisePath = path.join(exercisesDir, exercise);
    const runMePath = path.join(exercisePath, "run_me.js");
    const testPath = path.join(exercisePath, "test_ast.js");

    if (!fs.existsSync(runMePath) || !fs.existsSync(testPath)) {
      console.log(
        `‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é ${exercise} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç run_me.js –∏–ª–∏ test_ast.js`
      );
      continue;
    }

    console.log(`\nüìö –ó–∞–ø—É—Å–∫–∞—é —É—Ä–æ–∫: ${exercise}`);
    console.log("=".repeat(50));

    try {
      const results = await runMochaTests(testPath);
      showTestResults(results);

      totalPassed += results.stats.passes;
      totalFailed += results.stats.failures;

      if (results.stats.failures > 0) {
        failedExercises.push({
          name: exercise,
          failures: results.failures,
        });
      }

      console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${exercise}:`);
      console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${results.stats.passes}`);
      console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${results.stats.failures}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ${exercise}:`, error.message);
      failedExercises.push({
        name: exercise,
        error: error.message,
      });
    }
  }

  console.log("\n" + "=".repeat(60));
  console.log("üèÅ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´");
  console.log("=".repeat(60));
  console.log(`üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
  console.log(`   ‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${totalPassed}`);
  console.log(`   ‚ùå –í—Å–µ–≥–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${totalFailed}`);
  console.log(`   üìö –£—Ä–æ–∫–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: ${exercises.length}`);

  if (failedExercises.length > 0) {
    console.log(`\n‚ö†Ô∏è  –£—Ä–æ–∫–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ (${failedExercises.length}):`);
    failedExercises.forEach((exercise) => {
      console.log(`   üìå ${exercise.name}`);
      if (exercise.error) {
        console.log(`      üí• –û—à–∏–±–∫–∞: ${exercise.error}`);
      } else if (exercise.failures) {
        exercise.failures.forEach((failure) => {
          console.log(`      ‚ùå ${failure.title}: ${failure.err.message}`);
        });
      }
    });
  } else {
    console.log("\nüéâ –í—Å–µ —É—Ä–æ–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
  }
}

if (require.main === module) {
  runAllExercises().catch(console.error);
}

module.exports = { runAllExercises };
